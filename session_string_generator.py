#!/usr/bin/env python3
"""
Telegram Session String Generator

This script generates a session string that can be used for Telegram authentication
with the Telegram MCP server. The session string allows for portable authentication
without storing session files.

Usage:
    python session_string_generator.py

Requirements:
    - telethon
    - python-dotenv
"""

import os
from telethon.sync import TelegramClient
from telethon.sessions import StringSession
from dotenv import load_dotenv
import sys

# Load environment variables from .env file
load_dotenv()

API_ID = os.getenv("TELEGRAM_API_ID")
API_HASH = os.getenv("TELEGRAM_API_HASH")

if not API_ID or not API_HASH:
    print("Error: TELEGRAM_API_ID and TELEGRAM_API_HASH must be set in .env file")
    print("Create an .env file with your credentials from https://my.telegram.org/apps")
    sys.exit(1)

# Convert API_ID to integer
try:
    API_ID = int(API_ID)
except ValueError:
    print("Error: TELEGRAM_API_ID must be an integer")
    sys.exit(1)

print("\n" + "=" * 70)
print("        Telegram Session String Generator")
print("=" * 70)
print("\nüîê SECURITY NOTICE:")
print("This session string provides FULL ACCESS to your Telegram account.")
print("Treat it like a password - never share it or commit it to version control.")
print("\n‚úÖ What this script does:")
print("  ‚Ä¢ Authenticates with Telegram's official API using your credentials")
print("  ‚Ä¢ Generates a session string for persistent authentication")
print("  ‚Ä¢ Optionally saves the session string to your .env file")
print("\nüîí Security guarantees:")
print("  ‚Ä¢ Your credentials are ONLY sent to Telegram's official servers")
print("  ‚Ä¢ NO third-party services receive your data")
print("  ‚Ä¢ All processing is local on your machine")
print("  ‚Ä¢ The session string is generated by Telegram, not stored elsewhere")
print("\nüìù You will be asked to:")
print("  ‚Ä¢ Enter your phone number (with country code, e.g., +1234567890)")
print("  ‚Ä¢ Enter the verification code sent to your Telegram app")
print("  ‚Ä¢ If you have 2FA enabled, enter your password")
print("\n" + "=" * 70 + "\n")

input("Press Enter to continue...")

try:
    # Connect to Telegram and generate the session string
    print("\nüîÑ Connecting to Telegram...")
    with TelegramClient(StringSession(), API_ID, API_HASH) as client:
        # The client.session.save() function from StringSession returns the session string
        session_string = StringSession.save(client.session)

        print("\n‚úÖ Authentication successful!")
        print("\n" + "=" * 70)
        print("          YOUR SESSION STRING")
        print("=" * 70)
        print(f"\n{session_string}\n")
        print("=" * 70)
        print("\nüìã Add this to your .env file as:")
        print(f"TELEGRAM_SESSION_STRING={session_string}")
        print("\n‚ö†Ô∏è  CRITICAL SECURITY WARNINGS:")
        print("  ‚Ä¢ This string provides COMPLETE access to your Telegram account")
        print("  ‚Ä¢ Anyone with this string can read/send messages as you")
        print("  ‚Ä¢ NEVER share this string or commit it to public repositories")
        print("  ‚Ä¢ Store it securely in your .env file (already in .gitignore)")
        print("  ‚Ä¢ If compromised, regenerate immediately by running this script again")
        print("=" * 70 + "\n")

        # Optional: auto-update the .env file
        choice = input(
            "\nWould you like to automatically update your .env file with this session string? (y/N): "
        )
        if choice.lower() == "y":
            try:
                # Read the current .env file
                with open(".env", "r") as file:
                    env_contents = file.readlines()

                # Update or add the SESSION_STRING line
                session_string_line_found = False
                for i, line in enumerate(env_contents):
                    if line.startswith("TELEGRAM_SESSION_STRING="):
                        env_contents[i] = f"TELEGRAM_SESSION_STRING={session_string}\n"
                        session_string_line_found = True
                        break

                if not session_string_line_found:
                    env_contents.append(f"TELEGRAM_SESSION_STRING={session_string}\n")

                # Write back to the .env file
                with open(".env", "w") as file:
                    file.writelines(env_contents)

                print("\n.env file updated successfully!")
            except Exception as e:
                print(f"\nError updating .env file: {e}")
                print("Please manually add the session string to your .env file.")

except Exception as e:
    print(f"\nError: {e}")
    print("Failed to generate session string. Please try again.")
    sys.exit(1)
